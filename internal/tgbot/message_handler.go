package tgbot

import (
	"database/sql"
	"net/url"
	"time"

	"github.com/av1ppp/dada-ptizza_tg-bot/internal/parser"
	"github.com/av1ppp/dada-ptizza_tg-bot/internal/parser/instagram"
	"github.com/av1ppp/dada-ptizza_tg-bot/internal/parser/vk"
	"github.com/av1ppp/dada-ptizza_tg-bot/internal/store"
	"github.com/av1ppp/dada-ptizza_tg-bot/internal/tgbot/message"
	"github.com/av1ppp/dada-ptizza_tg-bot/pkg/rand"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func (bot *Bot) handleMessage(update *tgbotapi.Update, p *store.Purchase) {
	bot.searchUser(update, p)
}

func (bot *Bot) searchUser(update *tgbotapi.Update, p *store.Purchase) {
	msgText := update.Message.Text

	if msgText == "" {
		return
	}

	// –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î.
	// –ï—Å–ª–∏ –Ω–µ—Ç—É - —Å–æ–∑–¥–∞–µ–º.
	// –í—ã–Ω–µ—Å –≤ —Å–∞–º–æ–≤—ã–∑—ã–≤–∞—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫
	// –ª–µ–≥—á–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –±–ª–æ–∫–∞ –∫–æ–¥–∞
	var (
		err    error
		unf    bool // user not found
		u      *url.URL
		socnet store.SocialNetwork
		ui     *parser.UserInfo
	)

	p.TargetUser, err = store.GetUserByURL(msgText)
	if err != nil && err == sql.ErrNoRows {
		func() {
			socnet, err = DetectSocialNetwork(msgText)
			if err != nil {
				return
			}

			u, err = url.Parse(msgText)
			if err != nil {
				return
			}

			switch socnet {
			case store.SocialNetworkInsta:
				if ui, err = instagram.GetUserInfo(u, bot.instagramApi); err != nil {
					unf = true
					return
				}
			case store.SocialNetworkVK:
				if ui, err = vk.GetUserInfo(u, bot.vkApi); err != nil {
					unf = true
					return
				}
			default:
				err = message.ErrUnknownSocialNetwork
				return
			}

			p.TargetUser = &store.User{
				FirstName:          ui.FirstName,
				LastName:           ui.LastName,
				Picture:            *ui.Picture.Data,
				URL:                msgText,
				SocialNetwork:      socnet,
				CountPrivatePhotos: rand.IntMinMax(39, 58),
				CountPrivateVideos: rand.IntMinMax(12, 21),
				CountHiddenData:    rand.IntMinMax(10, 18),
				CountHiddenFriends: rand.IntMinMax(1, 3),
			}

			if ui.Sex == parser.SexFemale {
				p.TargetUser.Sex = store.SexFemale
			} else if ui.Sex == parser.SexMale {
				p.TargetUser.Sex = store.SexMale
			}

			if err = store.SaveUser(p.TargetUser); err != nil {
				return
			}
		}()
	} else {
		unf = false
	}

	if err != nil {
		bot.sendRequestError(p.ChatID, err)
		return
	}
	if unf {
		bot.Send(message.MessageUserNotFound(p.ChatID))
		return
	}

	// –ï—Å–ª–∏ –º—É–∂—Å–∫–æ–π –ø–æ–ª - –æ—Ç–≤–µ—á–∞–µ–º –º–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É
	if p.TargetUser.Sex == store.SexMale {
		bot.Send(message.MessageUserNotFound(p.ChatID))
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
	err = store.UpdatePurchaseByID(p)
	if err != nil {
		bot.sendRequestError(p.ChatID, err)
		return
	}

	msg_, err := message.MessageUserInfoHiddenCounters(p, bot.yoomoneyApi)
	if err != nil {
		bot.sendRequestError(p.ChatID, err)
	}

	if _, err := bot.Send(msg_); err != nil {
		bot.sendRequestError(p.ChatID, err)
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è
func (bot *Bot) sendSearchProgess(chatID int64, delay time.Duration, tmpMsgCh chan int) {
	// –ò–¥—ë—Ç –ø–æ–∏—Å–∫ üîç...
	tmpMsg, _ := bot.Send(message.MessageSearchInProgess(chatID))
	time.Sleep(delay)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –≤–∑–ª–æ–º—ã üòà...
	bot.Send(message.EditMessageCheckOurHacks(chatID, tmpMsg.MessageID))
	time.Sleep(delay)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–ª–∏–≤—ã ü§Ø...
	bot.Send(message.EditMessageCheckOurPlums(chatID, tmpMsg.MessageID))
	time.Sleep(delay)

	tmpMsgCh <- tmpMsg.MessageID
}
